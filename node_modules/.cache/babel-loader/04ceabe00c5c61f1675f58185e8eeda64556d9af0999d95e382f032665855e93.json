{"ast":null,"code":"var _jsxFileName = \"/Users/naheen/Desktop/CPSC481/481GasStation/src/BarGraph.js\";\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { inventory } from './Variables';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getColorForCategory = category => {\n  const categoryColors = {\n    chips: 'rgba(240, 0, 0, 0.3)',\n    drinks: 'rgba(0, 240, 0, 0.3)',\n    cookies: 'rgba(0, 0, 240, 0.3)',\n    candy: 'rgba(255, 165, 0, 0.3)',\n    misc: 'rgba(128, 128, 128, 0.3)'\n  };\n  return categoryColors[category] || 'rgba(0, 0, 0, 0.3)';\n};\nconst data = {\n  labels: inventory.map(item => item.name),\n  datasets: [{\n    label: 'Inventory Percentage',\n    backgroundColor: inventory.map(item => getColorForCategory(item.category)),\n    borderColor: inventory.map(item => getColorForCategory(item.category).replace('0.3', '1')),\n    borderWidth: 1,\n    hoverBackgroundColor: inventory.map(item => getColorForCategory(item.category).replace('0.3', '0.5')),\n    data: inventory.map(item => item.qty / item.capacity * 100)\n  }]\n};\nconst options = {\n  indexAxis: 'y',\n  plugins: {\n    legend: {\n      display: false\n    },\n    tooltip: {\n      callbacks: {\n        label: context => {\n          const dataIndex = context.dataIndex;\n          if (inventory && dataIndex >= 0 && dataIndex < inventory.length) {\n            const item = inventory[dataIndex];\n            return `Category: ${item.category}, Qty: ${item.qty}, Capacity: ${item.capacity}`;\n          }\n          return 'error?';\n        }\n      }\n    }\n  },\n  scales: {\n    x: {\n      beginAtZero: true,\n      suggestedMax: 100\n    }\n  }\n};\n\n// const customTooltip = tooltipModel => {\n//   const dataIndex = tooltipModel.dataIndex;\n\n//   // Check if inventory is defined and dataIndex is a valid index\n//   if (inventory && dataIndex >= 0 && dataIndex < inventory.length) {\n//     const item = inventory[dataIndex];\n//     const tooltipText = `Name: ${item.name}, Qty: ${item.qty}, Capacity: ${item.capacity}`;\n//     return tooltipText;\n//   }\n\n//   // Return an empty string or some default text if the data is not available\n//   return 'error?';\n// };\n\nconst BarGraph = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Sidebars, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"corner\",\n      children: \"Inventory Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"SetPrices\",\n        children: \"Update Inventory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 7\n  }, this);\n};\n_c = BarGraph;\nexport default BarGraph;\nvar _c;\n$RefreshReg$(_c, \"BarGraph\");","map":{"version":3,"names":["React","Bar","Chart","inventory","jsxDEV","_jsxDEV","getColorForCategory","category","categoryColors","chips","drinks","cookies","candy","misc","data","labels","map","item","name","datasets","label","backgroundColor","borderColor","replace","borderWidth","hoverBackgroundColor","qty","capacity","options","indexAxis","plugins","legend","display","tooltip","callbacks","context","dataIndex","length","scales","x","beginAtZero","suggestedMax","BarGraph","children","Sidebars","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/naheen/Desktop/CPSC481/481GasStation/src/BarGraph.js"],"sourcesContent":["import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { inventory } from './Variables'\n\nconst getColorForCategory = category => {\n\n  const categoryColors = {\n    chips: 'rgba(240, 0, 0, 0.3)',\n    drinks: 'rgba(0, 240, 0, 0.3)',\n    cookies: 'rgba(0, 0, 240, 0.3)',\n    candy: 'rgba(255, 165, 0, 0.3)',\n    misc: 'rgba(128, 128, 128, 0.3)',\n  };\n\n  return categoryColors[category] || 'rgba(0, 0, 0, 0.3)';\n};\n\nconst data = {\nlabels : inventory.map(item => item.name),\n\ndatasets : [\n{\n    label: 'Inventory Percentage',\n    backgroundColor: inventory.map(item => getColorForCategory(item.category)),\n    borderColor: inventory.map(item => getColorForCategory(item.category).replace('0.3', '1')),\n    borderWidth: 1,\n    hoverBackgroundColor: inventory.map(item => getColorForCategory(item.category).replace('0.3', '0.5')),\n    data: inventory.map(item => (item.qty / item.capacity) * 100),\n  },\n],\n};\n\n const options = {\n    indexAxis: 'y',\n    plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          callbacks: {\n            label: context => {\n              const dataIndex = context.dataIndex;\n              if (inventory && dataIndex >= 0 && dataIndex < inventory.length) {\n                const item = inventory[dataIndex];\n                return `Category: ${item.category}, Qty: ${item.qty}, Capacity: ${item.capacity}`;\n              }\n              return 'error?';\n            },\n          },\n        },\n    },\n    scales: {\n      x: {\n        beginAtZero: true,\n        suggestedMax: 100,\n      },\n    },\n};\n\n// const customTooltip = tooltipModel => {\n//   const dataIndex = tooltipModel.dataIndex;\n\n//   // Check if inventory is defined and dataIndex is a valid index\n//   if (inventory && dataIndex >= 0 && dataIndex < inventory.length) {\n//     const item = inventory[dataIndex];\n//     const tooltipText = `Name: ${item.name}, Qty: ${item.qty}, Capacity: ${item.capacity}`;\n//     return tooltipText;\n//   }\n\n//   // Return an empty string or some default text if the data is not available\n//   return 'error?';\n// };\n\nconst BarGraph = () => {\n    return (\n      <div>\n        <Sidebars />\n        \n        <div className=\"corner\">Inventory Management</div>\n  \n        <Bar options={options} data={data} />\n       \n        <div className=\"btn-group\">\n        <button className=\"SetPrices\">Update Inventory</button>\n        </div>\n \n      </div>\n    );\n  };\n  \n  export default BarGraph;\n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}